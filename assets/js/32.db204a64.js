(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{390:function(v,_,l){"use strict";l.r(_);var i=l(26),p=Object(i.a)({},(function(){var v=this,_=v.$createElement,l=v._self._c||_;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("p",[v._v("一、栈：栈是一种遵循后进先出"),l("code",[v._v("LIFO")]),v._v("原则的有序集合。")]),v._v(" "),l("ul",[l("li",[v._v("新添加或者待删除的元素都保存在栈的同一端，称栈顶，另一端叫栈底。（一摞书或叠放的盘子）")])]),v._v(" "),l("p",[v._v("二、队列：队列是遵循先进先出"),l("code",[v._v("FIFO")]),v._v("原则的一组有序的项。")]),v._v(" "),l("ul",[l("li",[v._v("队列在尾部添加新元素，并从顶部移除元素。最新添加的元素必须排在队列的末尾。（例如生活中排队）")])]),v._v(" "),l("p",[v._v("三、链表：(火车)")]),v._v(" "),l("p",[v._v("四、集合：一种无序且唯一的数据结构。ES6中有集合名为Set。")]),v._v(" "),l("p",[v._v("五、字典：与集合类似，字典也是一种存储唯一值的数据结构，但它是以键值对的形式来存储。ES6中有字典名为Map。")]),v._v(" "),l("p",[v._v("六、树：一种分层数据的抽象模型。")]),v._v(" "),l("p",[v._v("​\t\t前端工作中常见的树包括：DOM、级联选择、树形控件...")]),v._v(" "),l("ul",[l("li",[v._v("深度优先遍历\n"),l("ul",[l("li",[l("p",[v._v("访问根节点；")])]),v._v(" "),l("li",[l("p",[v._v("对根节点的children挨个遍历。")]),v._v(" "),l("p",[v._v("分为")])]),v._v(" "),l("li",[l("p",[v._v("先序遍历：根--\x3e左--\x3e右")])]),v._v(" "),l("li",[l("p",[v._v("中序遍历：左--\x3e根--\x3e右")])]),v._v(" "),l("li",[l("p",[v._v("后序遍历：左--\x3e右--\x3e根")])])])]),v._v(" "),l("li",[v._v("广度优先遍历\n"),l("ul",[l("li",[v._v("新建一个队列，把根节点入队；")]),v._v(" "),l("li",[v._v("把队头出队并访问；")]),v._v(" "),l("li",[v._v("把队头的children挨个入队。")]),v._v(" "),l("li",[v._v("重复二、三，直到队列为空。")])])])]),v._v(" "),l("p",[v._v("七、图")]),v._v(" "),l("ul",[l("li",[v._v("图是网络结构的抽象模型，是一组由边连接的节点。")]),v._v(" "),l("li",[v._v("深度优先遍历：尽可能深的搜索图的分支；\n"),l("ul",[l("li",[v._v("访问根节点；")]),v._v(" "),l("li",[v._v("对根节点的没访问过的相邻节点挨个进行深度优先遍历。")])])]),v._v(" "),l("li",[v._v("广度优先遍历：先访问离根节点最近的节点。\n"),l("ul",[l("li",[v._v("新建一个队列，把根节点入队；")]),v._v(" "),l("li",[v._v("把队头出队并访问；")]),v._v(" "),l("li",[v._v("把队头的没访问过的相邻节点入队；")]),v._v(" "),l("li",[v._v("重复第二、三步，直到队列为空。")])])])]),v._v(" "),l("p",[v._v("八、堆：堆是一种特殊的完全二叉树。")]),v._v(" "),l("ul",[l("li",[v._v("所有的节点都大于等于（最大堆）或小于等于（最小堆）它的子节点。")]),v._v(" "),l("li",[v._v("JS中通常用数组表示堆。")]),v._v(" "),l("li",[v._v("左侧子节点的位置是2*index+1；")]),v._v(" "),l("li",[v._v("右侧子节点的位置是2*index+2；")]),v._v(" "),l("li",[v._v("父节点的位置是(index-1)/2。")]),v._v(" "),l("li",[v._v("堆能高效、快速地找出最大值和最小值，时间复杂度O(1)。")])]),v._v(" "),l("ol",[l("li",[v._v("找出第K个最大（小）元素。\n"),l("ol",[l("li",[v._v("构建一个最小堆，并将元素依次插入堆中；")]),v._v(" "),l("li",[v._v("当堆的容量超过K，就删除堆顶；")]),v._v(" "),l("li",[v._v("插入结束后，堆顶就是第K个最大元素。")])])])]),v._v(" "),l("p",[v._v("九、排序和搜索")]),v._v(" "),l("ul",[l("li",[v._v("冒泡排序、选择排序、插入排序、归并排序、快速排序......")]),v._v(" "),l("li",[v._v("顺序搜索、二分搜索......")])]),v._v(" "),l("p",[v._v("十、分而治之：是算法设计中的一种方法")]),v._v(" "),l("ul",[l("li",[v._v("它将一个问题分成多个和原问题相似的小问题，递归解决小问题，再将结果合并以解决原来的问题。")])]),v._v(" "),l("p",[v._v("场景一：")]),v._v(" "),l("ul",[l("li",[v._v("分：把数组从中间一分为二；")]),v._v(" "),l("li",[v._v("解：递归的对两个子数组进行归并排序；")]),v._v(" "),l("li",[v._v("合：合并有序子数组。")])]),v._v(" "),l("p",[v._v("场景二：快速排序")]),v._v(" "),l("ul",[l("li",[v._v("分：选基准，按基准把数组分成两个子数组；")]),v._v(" "),l("li",[v._v("解：递归的对两个子数组进行快速排序；")]),v._v(" "),l("li",[v._v("合：对两个子数组进行合并。")])]),v._v(" "),l("p",[v._v("十一、动态规划")]),v._v(" "),l("ul",[l("li",[v._v("定义子问题；")]),v._v(" "),l("li",[v._v("反复执行")])]),v._v(" "),l("p",[v._v("十二、贪心算法")]),v._v(" "),l("ul",[l("li",[v._v("贪心算法是算法设计中的一种方法；")]),v._v(" "),l("li",[v._v("期盼通过每个阶段的局部最优选择，从而达到全局的最优。")]),v._v(" "),l("li",[v._v("结果并不一定是最优。")])]),v._v(" "),l("p",[v._v("十三、回溯算法")]),v._v(" "),l("ul",[l("li",[v._v("回溯算法是算法设计中的一种方法；")]),v._v(" "),l("li",[v._v("回溯算法是一种渐进式寻找并构建问题解决方式的策略；")]),v._v(" "),l("li",[v._v("回溯算法会先从一个可能的动作开始解决问题，如果不行，就回溯并选择另一个动作，直到将问题解决。")])]),v._v(" "),l("p",[v._v("例：")]),v._v(" "),l("ul",[l("li",[v._v("有很多路；")]),v._v(" "),l("li",[v._v("这些路里，有死路，也有出路；")]),v._v(" "),l("li",[v._v("通常需要递归来模拟所有的路。")])]),v._v(" "),l("ol",[l("li",[v._v("全排列")]),v._v(" "),l("li",[v._v("子集")]),v._v(" "),l("li",[v._v("......")])])])}),[],!1,null,null,null);_.default=p.exports}}]);